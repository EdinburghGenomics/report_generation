from collections import Counter
import yaml

__author__ = 'tcezard'


def parse_bamtools_stats(bamtools_stats):
    """Parse the stat file generated by bamtools.
    :param bamtools_stats the text file generated by bamtools
    :return a tuple of 4 integers: total_reads, mapped_reads, duplicate_reads, proper_pairs
    """
    with open(bamtools_stats) as open_file:
        for line in open_file:
            sp_line = line.strip().split()
            if line.startswith('Total reads:'):
                total_reads = int(sp_line[2])
            elif line.startswith('Mapped reads:'):
                mapped_reads = int(sp_line[2])
            elif line.startswith('Duplicates:'):
                duplicate_reads = int(sp_line[1])
            elif line.startswith("'Proper-pairs':"):
                proper_pairs = int(sp_line[1])
    return total_reads, mapped_reads, duplicate_reads, proper_pairs



def parse_callable_bed_file(bed_file):
    """parse a bed file originating from GATK CallableLoci tool
    :param: bed_file the bed file generated by CallableLoci
    :return a dict containing the coverage value for each type of Loci"""
    coverage_per_type=Counter()
    with open(bed_file) as open_file:
        for line in open_file:
            sp_line = line.strip().split()
            coverage_per_type[sp_line[3]]+=int(sp_line[2]) - int(sp_line[1]) +1
    return coverage_per_type

def parse_highdepth_yaml_file(yaml_file):
    """parse a yaml file containing median coverage output by bcbio
    :param: yaml_file the bed file generated by CallableLoci
    :return a string representing the median coverage for that library"""
    content={}
    with open(yaml_file) as open_file:
        content = yaml.load(open_file)
    return content.get('median_cov', 0)



